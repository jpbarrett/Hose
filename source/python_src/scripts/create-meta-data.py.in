#!@PYTHON_EXECUTABLE@


import optparse
import sys
import os
import glob
from datetime import datetime
import time
import math

from hose import hinfluxdb_module
from hose import hinterface_module

def generate_meta_data_file(dbclient, path_to_scan_data, start_time_stamp, end_time_stamp):

    meta_data_filename = "meta_data.json"
    meta_data_filepath = os.path.join(path_to_scan_data, meta_data_filename)
    obj_list = []

    digi_config = dbclient.get_most_recent_measurement("digitizer_config", end_time_stamp)
    for x in digi_config:
        obj_list.append( json.dumps(x, indent=4, sort_keys=True) )

    spec_config = dbclient.get_most_recent_measurement("spectrometer_config", end_time_stamp)
    for x in spec_config:
        obj_list.append( json.dumps(x, indent=4, sort_keys=True) )

    noise_config = dbclient.get_most_recent_measurement("noise_diode_config", end_time_stamp)
    for x in noise_config:
        obj_list.append( json.dumps(x, indent=4, sort_keys=True) )

    udc_info = dbclient.get_most_recent_measurement("udc_status", end_time_stamp)
    for x in udc_info:
        obj_list.append( json.dumps(x, indent=4, sort_keys=True) )

    source_info = dbclient.get_most_recent_measurement("source_status", end_time_stamp)
    for x in source_info:
        obj_list.append( json.dumps(x, indent=4, sort_keys=True) )

    recording_info = dbclient.get_measurement_from_time_range("recording_status", start_time_stamp, end_time_stamp, 1)
    for x in recording_info:
        obj_list.append( json.dumps(x, indent=4, sort_keys=True) )

    temp_list = []
    most_recent_data_validity_info = dbclient.get_most_recent_measurement("data_validity", start_time_stamp)
    for x in most_recent_data_validity_info:
        temp_list.append( json.dumps(x, indent=4, sort_keys=True) )
    data_validity_info = dbclient.get_measurement_from_time_range("data_validity", start_time_stamp, end_time_stamp, 1)
    for x in data_validity_info:
        temp_list.append( json.dumps(x, indent=4, sort_keys=True) )
    fset = frozenset(temp_list)
    for z in fset:
        obj_list.append( z )

    temp_list = []
    most_recent_antenna_target_info = dbclient.get_most_recent_measurement("antenna_target_status", start_time_stamp)
    for x in most_recent_antenna_target_info:
        temp_list.append( json.dumps(x, indent=4, sort_keys=True) )
    antenna_target_info = dbclient.get_measurement_from_time_range("antenna_target_status", start_time_stamp, end_time_stamp, 1)
    for x in antenna_target_info:
        temp_list.append( json.dumps(x, indent=4, sort_keys=True) )
    fset = frozenset(temp_list)
    for z in fset:
        obj_list.append( z )

    antenna_position_info = dbclient.get_measurement_from_time_range("antenna_position", start_time_stamp, end_time_stamp, 1)
    for x in antenna_position_info:
        obj_list.append( json.dumps(x, indent=4, sort_keys=True) )
    dump_dict_list_to_json_file(obj_list, meta_data_filepath)


def main():
    usage_text = '\n create-meta-data.py <scan data directory>'
    parser = optparse.OptionParser(usage=usage_text)

    (opts, args) = parser.parse_args()

    if(len(args) != 1):
        print("Error: should specify the directory containing the scan of interest.")
        print(usage_text)
        sys.exit(1)

    data_dir = args[0]
    path_to_scan_data = os.path.abspath(data_dir)

    #get list of all .spec files in the data directory and determine the start/stop times of this scan
    spec_file_list = glob.glob( os.path.join(path_to_scan_data, "*.spec") )

    if len(spec_file_list) < 1:
        print("Error: no spectrum files found.")
        sys.exit(1)

    #read the header of the first file to determine the sampling frequency
    tmp_spec = hinterface_module.open_spectrum_file(spec_file_list[0])
    sampling_freq = float(tmp_spec.header.sample_rate)

    #format of spec names is: 1530805758_36607885312_UX.spec  
    #now strip start/end second and sample index
    spec_times = []
    for spec in spec_file_list:
        pieces = os.path.basename(spec).split('_')
        sec_stamp = float(pieces[0])
        index_stamp = float(pieces[1])
        t = sec_stamp +  index_stamp/sampling_freq
        spec_times.append(t)

    #determine start and stop times
    start_time_sec = math.floor( min(spec_times) )
    stop_time_sec = math.ceil( max(spec_times) )
    

    start_time_stamp = datetime.utcfromtimestamp(start_time_sec)
    end_time_stamp = datetime.utcfromtimestamp(stop_time_sec)

    print("start = ", start_time_stamp)
    print("end = ", end_time_stamp)
    
    #create db interface and connect to (Westford) data base
    dbinterface = hinfluxdb_module.wf_influxdb()

    generate_meta_data_file(dbclient, path_to_scan_data, start_time_stamp, end_time_stamp)



################################################################################

if __name__ == '__main__':          # official entry point
    main()
    sys.exit(0)
