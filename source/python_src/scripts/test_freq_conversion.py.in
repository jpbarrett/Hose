#!@PYTHON_EXECUTABLE@
from datetime import datetime, timedelta
import json
import os
import sys
import copy

from hose import hfrontend_module

def main():

    schain = hfrontend_module.westford_signal_chain()

    dc_signal = hfrontend_module.signal()
    if_dc_freq = 0.0
    dc_signal.add_amp_freq(1.0, if_dc_freq)

    upper_ac_signal = hfrontend_module.signal()
    upper_ac_signal.add_amp_freq(1.0, 80.0)

    #make a simple linear model:
    delta_freq_initial = upper_ac_signal.amplitude_frequency_pair_list[0][1] - dc_signal.amplitude_frequency_pair_list[0][1]

    print "delta freq initial = ", delta_freq_initial

    print "Before:"
    dc_signal.print_amp_freqs()
    print "converter:"
    schain.convert_signal_backward(dc_signal)
    print "After:"
    dc_signal.print_amp_freqs()

    print "--------------------------------------------------------------------"
    print "Before:"
    upper_ac_signal.print_amp_freqs()
    print "converter:"
    schain.convert_signal_backward(upper_ac_signal)
    print "After:"
    upper_ac_signal.print_amp_freqs()

    xform_lower_freq = 0.0
    for amp, freq in dc_signal.amplitude_frequency_pair_list:
        if amp > 0:
            xform_lower_freq = freq

    xform_upper_freq = 0.0
    for amp, freq in upper_ac_signal.amplitude_frequency_pair_list:
        if amp > 0:
            xform_upper_freq = freq

    delta_freq_final = xform_upper_freq - xform_lower_freq

    print "delta freq final = ", delta_freq_final

    slope = delta_freq_final/delta_freq_initial
    offset = xform_lower_freq

    print "slope = ", slope
    print "offset = ", offset

    #computer the maser ac signal x-form:
    if_ml_freq = 49.882
    ml_freq = offset + slope*(if_ml_freq - if_dc_freq)
    print "assumed maser line IF freq :", if_ml_freq
    print "predicted maser line sky freq: ", ml_freq

    sky_maser_signal = hfrontend_module.signal()
    sky_maser_signal.add_amp_freq(1.0, 6668.518)

    ac_signal1 = hfrontend_module.signal()
    ac_signal1.add_amp_freq(1.0, 1.0)

    maser_ac_signal = hfrontend_module.signal()
    maser_ac_signal.add_amp_freq(1.0, 49.882)

    print "Before:"
    ac_signal1.print_amp_freqs()
    print "converter:"
    schain.convert_signal_backward(ac_signal1)
    print "After:"
    ac_signal1.print_amp_freqs()
    print "--------------------------------------------------------------------"
    print "Before:"
    maser_ac_signal.print_amp_freqs()
    print "converter:"
    schain.convert_signal_backward(maser_ac_signal)
    print "After:"
    maser_ac_signal.print_amp_freqs()
    print "--------------------------------------------------------------------"

    print "--------------------------------------------------------------------"
    print "Before:"
    sky_maser_signal.print_amp_freqs()
    print "After:"
    schain.convert_signal_forward(sky_maser_signal)
    sky_maser_signal.print_amp_freqs()


    print("Done.")

    #add the sky frequency information as well
    udc_luff_freq = 7052.6
    sampling_frequency_Hz = 400e6
    spectrometer_fftsize = 131072
    wf_signal_chain = hfrontend_module.westford_signal_chain(udc_luff_freq, disable_filter4=True)
    spectral_resolution_MHz = float(sampling_frequency_Hz/float(spectrometer_fftsize))/1e6
    n_spec_bins = spectrometer_fftsize/2 + 1
    center_bin = int(n_spec_bins/2)
    center_bin_if_freq = (float(center_bin) + 0.5)*spectral_resolution_MHz
    center_bin_sky_freq = wf_signal_chain.map_frequency_backward(center_bin_if_freq)
    bin_delta = 1 #a bin increment of (bin_delta) corresponds to an incrment in frequecy space of (frequency_delta)
    [if_low, if_high] = [0.0, bin_delta*spectral_resolution_MHz] #[lower edge of lowest bin, upper edge of lowest bin]
    [sky_low, sky_high] = wf_signal_chain.map_frequency_pair_backward(if_low, if_high)
    slope = ( (sky_high - sky_low)/(if_high - if_low) ) #slope had better be either +1 or -1
    frequency_delta = slope*spectral_resolution_MHz
    freq_map = hfrontend_module.frequency_map()
    freq_map.set_time("") #frequency_map gets the same time stamp as the UDC LO-set time
    freq_map.set_reference_bin_index(center_bin)
    freq_map.set_reference_bin_center_sky_frequency(center_bin_sky_freq)
    freq_map.set_bin_delta(bin_delta)
    freq_map.set_frequency_delta(frequency_delta)

    print("freq map: ", freq_map.as_dict() )




if __name__ == '__main__':          # official entry point
    main()
    sys.exit(0)
